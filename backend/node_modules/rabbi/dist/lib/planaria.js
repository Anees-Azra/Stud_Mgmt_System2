"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Crawler = void 0;
const events_1 = require("events");
const split2 = require("split2");
const through2 = require("through2");
const node_fetch_1 = require("node-fetch");
const token = process.env.PLANARIA_TOKEN;
class Crawler extends events_1.EventEmitter {
    constructor(params) {
        super();
        this.query = params.query;
        this.onTransaction = params.onTransaction;
        this.token = params.token || process.env.PLANARIA_TOKEN;
        if (!this.token) {
            throw new Error('planaria.token.required');
        }
    }
    start() {
        (0, node_fetch_1.default)("https://txo.bitbus.network/block", {
            method: "post",
            headers: {
                'Content-type': 'application/json; charset=utf-8',
                'token': token
            },
            body: JSON.stringify(this.query)
        })
            .then((res) => __awaiter(this, void 0, void 0, function* () {
            return res.body
                .pipe(split2())
                .pipe(through2((chunk, enc, callback) => __awaiter(this, void 0, void 0, function* () {
                try {
                    let json = JSON.parse(chunk.toString());
                    this.emit('chunk', json);
                    yield this.onTransaction(json);
                }
                catch (error) {
                    this.emit('error', error);
                }
                callback();
            })))
                .on('end', () => {
                this.emit('end');
                this.onEnd();
            });
        }));
        return this;
    }
}
exports.Crawler = Crawler;
//# sourceMappingURL=planaria.js.map